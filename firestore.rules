/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model.  Each user has a dedicated data tree under `/users/{userId}` that only they can access.
 * @data_structure All data is nested under `/users/{userId}`, with various subcollections for incomes, expenses, credit cards, etc.
 * @key_security_decisions
 *   - Listing all users is disallowed.
 *   - All write operations require an authenticated user.
 *   - Only the authenticated user can read/write data under their own `/users/{userId}` path.
 *   - Data consistency between the path and document fields is enforced on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root match to prevent open reads and writes.
     * @path /databases/{database}/documents
     * @allow (get) Authenticated user.
     * @deny (get) Unauthenticated user.
     * @principle Root-level match ensures that no read/write can occur outside defined paths.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the owner of the existing resource
    function isExistingOwner(userId) {
      return request.auth.uid == resource.data.uid;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with matching userId.
     * @allow (list) if false
     * @allow (create) User with matching userId.
     * @allow (update) User with matching userId.
     * @allow (delete) User with matching userId.
     * @deny (get) Any other user.
     * @deny (create) Any other user.
     * @deny (update) Any other user.
     * @deny (delete) Any other user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

       match /incomes/{incomeId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /expenses/{expenseId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /creditCards/{cardId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /masterExpenses/{masterExpenseId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /assets/{assetId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /liabilities/{liabilityId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /notes/{noteId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /netWorthHistory/{historyId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }

       match /expenseCategories/{categoryId} {
          allow get: if isOwner(userId);
          allow list: if false;
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isOwner(userId);
          allow delete: if isSignedIn() && isOwner(userId);
        }
    }
  }
}