/**
 * @fileoverview Firestore Security Rules for the Personal Finance Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only access
 * and modify data that belongs to them. This is achieved by structuring data
 * under /users/{userId} and validating the authenticated user's ID against
 * the {userId} path segment.
 *
 * Data Structure:
 * All personal finance data (incomes, expenses, credit cards, etc.) is nested
 * under the /users/{userId} collection. This ensures that data is isolated
 * to each user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The rules explicitly deny any operations that are not explicitly allowed.
 * - All write operations (create, update, delete) require authentication and
 *   ownership validation.
 * - Read operations (get, list) are restricted to the owner of the data,
 *   ensuring privacy.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the path-based ownership model, where the {userId}
 *    segment implicitly grants ownership.  There is no explicit denormalized
 *    `ownerId` field within the documents themselves.
 *
 * Structural Segregation:
 *  - The application uses a private user subcollection structure. There are no
 *    public top-level collections in this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId} document.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) Signed-in user creates their own profile: request.auth.uid == userId.
     * @deny (create) User attempts to create another user's profile: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own profile: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's profile: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own profile: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's profile: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own profile: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's profile: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own profile.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rule for the /users/{userId}/incomes/{incomeId} document.
     * @path /databases/{database}/documents/users/{userId}/incomes/{incomeId}
     * @allow (create) Signed-in user creates an income entry for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create an income entry for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own income entry: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's income entry: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own income entry: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's income entry: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own income entry: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's income entry: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own income entries.
     */
    match /users/{userId}/incomes/{incomeId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/expenses/{expenseId} document.
     * @path /databases/{database}/documents/users/{userId}/expenses/{expenseId}
     * @allow (create) Signed-in user creates an expense entry for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create an expense entry for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own expense entry: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's expense entry: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own expense entry: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's expense entry: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own expense entry: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's expense entry: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own expense entries.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/creditCards/{cardId} document.
     * @path /databases/{database}/documents/users/{userId}/creditCards/{cardId}
     * @allow (create) Signed-in user creates a credit card for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create a credit card for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own credit card: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's credit card: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own credit card: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's credit card: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own credit card: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's credit card: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own credit cards.
     */
    match /users/{userId}/creditCards/{cardId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/masterExpenses/{masterExpenseId} document.
     * @path /databases/{database}/documents/users/{userId}/masterExpenses/{masterExpenseId}
     * @allow (create) Signed-in user creates a master expense for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create a master expense for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own master expense: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's master expense: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own master expense: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's master expense: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own master expense: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's master expense: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own master expenses.
     */
    match /users/{userId}/masterExpenses/{masterExpenseId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/assets/{assetId} document.
     * @path /databases/{database}/documents/users/{userId}/assets/{assetId}
     * @allow (create) Signed-in user creates an asset for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create an asset for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own asset: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's asset: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own asset: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's asset: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own asset: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's asset: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own assets.
     */
    match /users/{userId}/assets/{assetId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/liabilities/{liabilityId} document.
     * @path /databases/{database}/documents/users/{userId}/liabilities/{liabilityId}
     * @allow (create) Signed-in user creates a liability for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create a liability for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own liability: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's liability: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own liability: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's liability: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own liability: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's liability: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own liabilities.
     */
    match /users/{userId}/liabilities/{liabilityId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/notes/{noteId} document.
     * @path /databases/{database}/documents/users/{userId}/notes/{noteId}
     * @allow (create) Signed-in user creates a note for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create a note for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own note: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's note: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own note: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's note: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own note: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's note: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/netWorthHistory/{historyId} document.
     * @path /databases/{database}/documents/users/{userId}/netWorthHistory/{historyId}
     * @allow (create) Signed-in user creates a net worth history entry for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create a net worth history entry for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own net worth history entry: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's net worth history entry: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own net worth history entry: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's net worth history entry: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own net worth history entry: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's net worth history entry: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own net worth history.
     */
    match /users/{userId}/netWorthHistory/{historyId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/expenseCategories/{categoryId} document.
     * @path /databases/{database}/documents/users/{userId}/expenseCategories/{categoryId}
     * @allow (create) Signed-in user creates an expense category for themselves: request.auth.uid == userId.
     * @deny (create) User attempts to create an expense category for another user: request.auth.uid != userId.
     * @allow (get) Signed-in user gets their own expense category: request.auth.uid == userId.
     * @deny (get) User attempts to get another user's expense category: request.auth.uid != userId.
     * @allow (update) Signed-in user updates their own expense category: request.auth.uid == userId.
     * @deny (update) User attempts to update another user's expense category: request.auth.uid != userId.
     * @allow (delete) Signed-in user deletes their own expense category: request.auth.uid == userId.
     * @deny (delete) User attempts to delete another user's expense category: request.auth.uid != userId.
     * @principle Enforces user-ownership: only the authenticated user can access their own expense categories.
     */
    match /users/{userId}/expenseCategories/{categoryId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }
  }
}