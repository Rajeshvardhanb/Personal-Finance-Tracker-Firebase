/**
 * @fileoverview Firestore Security Rules for the personal finance application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has a dedicated data tree rooted at `/users/{userId}`.
 * Only the authenticated user can read and write data within their own user data tree.
 *
 * Data Structure:
 * All personal finance data (incomes, expenses, credit cards, etc.) is nested under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of user profiles is forbidden to prevent data leakage.
 *
 * Denormalization for Authorization:
 *  - The application enforces that the `userId` path segment matches the `uid` field within the `UserProfile` document.  This is enforced on creation and immutability is enforced on update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all user profiles.
     * @path /users
     * @allow None (listing is denied)
     * @deny list: Always. User listing is not permitted.
     * @principle Prevents unauthorized access to user profile data.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'testUID' can create their profile if authenticated as 'testUID'.
     * @allow (get, update, delete) User with ID 'testUID' can read/update/delete their profile if authenticated as 'testUID'.
     * @deny (create) User with ID 'otherUID' cannot create a profile for 'testUID'.
     * @deny (get, update, delete) User with ID 'otherUID' cannot read/update/delete the profile for 'testUID'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreate(userId, request.resource.data.uid);
      allow update: if isExistingOwner(userId) && isUidNotChanged(userId, resource.data.uid);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to income entries for a specific user.
     * @path /users/{userId}/incomes/{incomeId}
     * @allow (create) User with ID 'testUID' can create an income entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own income entries.
     * @deny (create) User with ID 'otherUID' cannot create an income entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete income entries for 'testUID'.
     * @principle Enforces document ownership for income entries.
     */
    match /users/{userId}/incomes/{incomeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to expense entries for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with ID 'testUID' can create an expense entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own expense entries.
     * @deny (create) User with ID 'otherUID' cannot create an expense entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete expense entries for 'testUID'.
     * @principle Enforces document ownership for expense entries.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to credit card entries for a specific user.
     * @path /users/{userId}/creditCards/{cardId}
     * @allow (create) User with ID 'testUID' can create a credit card entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own credit card entries.
     * @deny (create) User with ID 'otherUID' cannot create a credit card entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete credit card entries for 'testUID'.
     * @principle Enforces document ownership for credit card entries.
     */
    match /users/{userId}/creditCards/{cardId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to master expense entries for a specific user.
     * @path /users/{userId}/masterExpenses/{masterExpenseId}
     * @allow (create) User with ID 'testUID' can create a master expense entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own master expense entries.
     * @deny (create) User with ID 'otherUID' cannot create a master expense entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete master expense entries for 'testUID'.
     * @principle Enforces document ownership for master expense entries.
     */
    match /users/{userId}/masterExpenses/{masterExpenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to asset entries for a specific user.
     * @path /users/{userId}/assets/{assetId}
     * @allow (create) User with ID 'testUID' can create an asset entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own asset entries.
     * @deny (create) User with ID 'otherUID' cannot create an asset entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete asset entries for 'testUID'.
     * @principle Enforces document ownership for asset entries.
     */
    match /users/{userId}/assets/{assetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to liability entries for a specific user.
     * @path /users/{userId}/liabilities/{liabilityId}
     * @allow (create) User with ID 'testUID' can create a liability entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own liability entries.
     * @deny (create) User with ID 'otherUID' cannot create a liability entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete liability entries for 'testUID'.
     * @principle Enforces document ownership for liability entries.
     */
    match /users/{userId}/liabilities/{liabilityId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to note entries for a specific user.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with ID 'testUID' can create a note entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own note entries.
     * @deny (create) User with ID 'otherUID' cannot create a note entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete note entries for 'testUID'.
     * @principle Enforces document ownership for note entries.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to net worth history entries for a specific user.
     * @path /users/{userId}/netWorthHistory/{historyId}
     * @allow (create) User with ID 'testUID' can create a net worth history entry under their profile.
     * @allow (get, list, update, delete) User with ID 'testUID' can read/list/update/delete their own net worth history entries.
     * @deny (create) User with ID 'otherUID' cannot create a net worth history entry for 'testUID'.
     * @deny (get, list, update, delete) User with ID 'otherUID' cannot read/list/update/delete net worth history entries for 'testUID'.
     * @principle Enforces document ownership for net worth history entries.
     */
    match /users/{userId}/netWorthHistory/{historyId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isSelfCreate(userId, resourceUid) {
        return isSignedIn() && (userId == request.auth.uid) && (userId == resourceUid);
    }

    function isUidNotChanged(userId, resourceUid){
        return isSignedIn() && isOwner(userId) && (userId == resourceUid);
    }
  }
}